from sentence_transformers import SentenceTransformer, util
import pickle
import os
import json
from rapidfuzz import fuzz

MODEL_NAME = 'all-MiniLM-L6-v2'
DATA_FILE = "vio_words.pkl"
NON_DATA_FILE = "non_vio_words.pkl"
TXT_FILE = "luat_data.txt"
TOXIC_JSON = "toxic_abb.json"
SIMILARITY_THRESHOLD = 0.60
FUZZY_MATCH_THRESHOLD = 80 

print("ƒêang t·∫£i m√¥ h√¨nh AI...")
model = SentenceTransformer(MODEL_NAME)

# Load toxic abb
try:
    with open(TOXIC_JSON, "r", encoding="utf-8") as f:
        TOXIC_ABBREVIATIONS = json.load(f)
    print(f"‚úÖ ƒê√£ n·∫°p {len(TOXIC_ABBREVIATIONS)} t·ª´ vi·∫øt t·∫Øt t·ª´ {TOXIC_JSON}")
except Exception as e:
    print(f"‚ùå L·ªói ƒë·ªçc {TOXIC_JSON}: {e}")
    TOXIC_ABBREVIATIONS = {}

def check_abb(text):
    words = text.split()
    for word in words:
        for abbr in TOXIC_ABBREVIATIONS.keys():
            if fuzz.ratio(word.lower(), abbr.lower()) >= FUZZY_MATCH_THRESHOLD:
                return True, word, abbr
    return False, None, None

# Expand word
def expand_abb(text):
    words = text.split()
    for i, word in enumerate(words):
        for abbr, full in TOXIC_ABBREVIATIONS.items():
            similarity = fuzz.ratio(word.lower(), abbr.lower())
            if similarity >= FUZZY_MATCH_THRESHOLD:
                print(f"üîç Nh·∫≠n d·∫°ng '{word}' ~ '{abbr}' ({similarity}%) ‚Üí thay b·∫±ng '{full}'")
                words[i] = full
    return " ".join(words)

def load_vio_from_txt(file_path):
    data = []
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            for line in f:
                if " - " in line:
                    text, level = line.strip().split(" - ")
                    data.append((text.strip(), level.strip()))
    except Exception as e:
        print(f"‚ùå L·ªói ƒë·ªçc file TXT: {e}")
    return data

def get_embed(data):
    texts = [x[0] for x in data]
    labels = [x[1] for x in data]
    embs = model.encode(texts, convert_to_tensor=True)
    return texts, labels, embs

default_rule = [
    ("Spam tin nh·∫Øn g√¢y phi·ªÅn h√†", "M·ª©c 3"),
    ("Chat n·ªôi dung 18+", "M·ª©c 4"),
    ("Ch·ª≠i t·ª•c, d√πng nh·ªØng t·ª´ toxic", "M·ª©c 4"),
    ("D√πng nh·ªØng t·ª´ kh√¥ng ph√π h·ª£p v·ªõi ti√™u chu·∫©n c·ªông ƒë·ªìng", "M·ª©c 4"),
    ("X√∫c ph·∫°m ng∆∞·ªùi kh√°c", "M·ª©c 4"),
    ("K√™u g·ªçi, s√°t sinh", "M·ª©c 5"),
    ("Qu·∫£ng c√°o server kh√°c (n·ªôi dung c√≥ ch·ª©a b·∫°n c√≥ mu·ªën v√†o server discord m√¨nh kh√¥ng, /discord.gg/...)- M·ª©c 5", "M·ª©c 5"),
]

if os.path.exists(DATA_FILE):
    with open(DATA_FILE, "rb") as f:
        training_data = pickle.load(f)
elif os.path.exists(TXT_FILE):
    training_data = load_vio_from_txt(TXT_FILE)
    if not training_data:
        print("‚ö†Ô∏è File TXT r·ªóng ho·∫∑c l·ªói, d√πng m·∫´u m·∫∑c ƒë·ªãnh.")
        training_data = default_rule
    with open(DATA_FILE, "wb") as f:
        pickle.dump(training_data, f)
else:
    print("‚ö†Ô∏è Kh√¥ng c√≥ file TXT ho·∫∑c pkl, d√πng m·∫´u m·∫∑c ƒë·ªãnh.")
    training_data = default_rule
    with open(DATA_FILE, "wb") as f:
        pickle.dump(training_data, f)

texts, labels, embeddings = get_embed(training_data)

def detectVio(user_input):
    input_emb = model.encode(user_input, convert_to_tensor=True)
    scores = util.cos_sim(input_emb, embeddings)[0]
    best_idx = scores.argmax().item()
    best_score = float(scores[best_idx])
    print(f"üîç ƒêi·ªÉm t∆∞∆°ng ƒë·ªìng: {best_score:.2f} (ng∆∞·ª°ng: {SIMILARITY_THRESHOLD})")
    if best_score < SIMILARITY_THRESHOLD:
        return None
    return {
        "input": user_input,
        "match": texts[best_idx],
        "level": labels[best_idx],
        "score": best_score
    }

def learnVio(user_input, correct_level):
    training_data.append((user_input, correct_level))
    with open(DATA_FILE, "wb") as f:
        pickle.dump(training_data, f)
    global texts, labels, embeddings
    texts, labels, embeddings = get_embed(training_data)
    print("‚úÖ ƒê√£ h·ªçc th√™m d·ªØ li·ªáu vi ph·∫°m.")

def learnNonVio(user_input):
    try:
        with open(NON_DATA_FILE, "rb") as f:
            non_violations = pickle.load(f)
    except FileNotFoundError:
        non_violations = []

    if user_input not in non_violations:
        non_violations.append(user_input)
        with open(NON_DATA_FILE, "wb") as f:
            pickle.dump(non_violations, f)
        print("‚úÖ Bot ƒë√£ h·ªçc ƒë√¢y l√† c√¢u h·ª£p l·ªá.")
    else:
        print("‚ÑπÔ∏è C√¢u n√†y ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† h·ª£p l·ªá tr∆∞·ªõc ƒë√≥.")

print("\nü§ñ Chatbot ki·ªÉm tra vi ph·∫°m ƒë√£ s·∫µn s√†ng.")
print("G√µ 'exit' ƒë·ªÉ tho√°t.\n")

while True:
    user_msg_raw = input("üë§ Ng∆∞·ªùi d√πng: ").strip()
    if user_msg_raw.lower() == "exit":
        print("üëã T·∫°m bi·ªát!")
        break
    if not user_msg_raw:
        continue

    is_abbr, word_found, matched_abbr = check_abb(user_msg_raw)
    if is_abbr:
        print(f"‚ö†Ô∏è Ph√°t hi·ªán vi·∫øt t·∫Øt/toxic: '{word_found}' ~ '{matched_abbr}' -> m·ªü r·ªông tr∆∞·ªõc khi ki·ªÉm tra AI.")

    user_msg = expand_abb(user_msg_raw)

    try:
        with open(NON_DATA_FILE, "rb") as f:
            non_violations = pickle.load(f)
        if user_msg_raw in non_violations:
            print("‚úÖ C√¢u n√†y ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† kh√¥ng vi ph·∫°m. B·ªè qua.")
            continue
    except FileNotFoundError:
        pass

    result = detectVio(user_msg)

    if result is None:
        print("‚úÖ Kh√¥ng ph√°t hi·ªán vi ph·∫°m. C√¢u h·ª£p l·ªá.")
        confirm = input("‚ùì Theo b·∫°n, c√¢u n√†y c√≥ vi ph·∫°m kh√¥ng? (y/n): ").lower().strip()
        if confirm == "y":
            level = input("üëâ Nh·∫≠p m·ª©c ƒë√∫ng (1‚Äì5): ").strip()
            if level.isdigit() and 1 <= int(level) <= 5:
                learnVio(user_msg, f"M·ª©c {level}")
            else:
                print("‚ùå Vui l√≤ng nh·∫≠p m·ª©c h·ª£p l·ªá (1‚Äì5).")
        else:
            learnNonVio(user_msg)
    else:
        print(f"\n‚ö†Ô∏è  Vi ph·∫°m nghi ng·ªù: {result['match']}")
        print(f"üß∫  M·ª©c c·∫£nh c√°o: {result['level']} (t∆∞∆°ng ƒë·ªìng: {result['score']:.2f})")

        feedback = input("ü§î C·∫£nh b√°o ƒë√∫ng kh√¥ng? (y/n): ").lower().strip()
        if feedback == "n":
            true_level = input("üëâ Nh·∫≠p m·ª©c ƒë√∫ng (1‚Äì5) ho·∫∑c 0 n·∫øu KH√îNG vi ph·∫°m: ").strip()
            if true_level.isdigit():
                level_int = int(true_level)
                if level_int == 0:
                    learnNonVio(user_msg)
                elif 1 <= level_int <= 5:
                    learnVio(user_msg, f"M·ª©c {level_int}")
                else:
                    print("‚ùå M·ª©c kh√¥ng h·ª£p l·ªá.")
            else:
                print("‚ùå Vui l√≤ng nh·∫≠p s·ªë.")
    print("\n" + "-"*50 + "\n")
